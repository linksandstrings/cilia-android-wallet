/**
 * API
 * Create API keys in your profile and use public API key as username and secret as password to authorize.
 *
 * The version of the OpenAPI document: 2.19.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mycelium.bequant.remote.trading.model

import com.fasterxml.jackson.annotation.JsonProperty

/**
 *
 * @param id
 * @param clientOrderId
 * @param symbol
 * @param side
 * @param status
 * @param type
 * @param timeInForce
 * @param quantity
 * @param createdAt
 * @param updatedAt
 * @param price
 * @param avgPrice
 * @param cumQuantity
 * @param postOnly
 * @param stopPrice
 * @param expireTime
 * @param positionId Margin position
 * @param tradesReport
 */

data class Order(
        @JsonProperty("id")
        val id: kotlin.Long,
        @JsonProperty("clientOrderId")
        val clientOrderId: kotlin.String,
        @JsonProperty("symbol")
        val symbol: kotlin.String,
        @JsonProperty("side")
        val side: Order.Side,
        @JsonProperty("status")
        val status: Order.Status,
        @JsonProperty("type")
        val type: Order.Type,
        @JsonProperty("timeInForce")
        val timeInForce: Order.TimeInForce,
        @JsonProperty("quantity")
        val quantity: kotlin.String,
        @JsonProperty("createdAt")
        val createdAt: java.util.Date,
        @JsonProperty("updatedAt")
        val updatedAt: java.util.Date,
        @JsonProperty("price")
        val price: kotlin.String? = null,
        @JsonProperty("avgPrice")
        val avgPrice: kotlin.String? = null,
        @JsonProperty("cumQuantity")
        val cumQuantity: kotlin.String? = null,
        @JsonProperty("postOnly")
        val postOnly: kotlin.Boolean? = null,
        @JsonProperty("stopPrice")
        val stopPrice: kotlin.String? = null,
        @JsonProperty("expireTime")
        val expireTime: java.util.Date? = null,
        @JsonProperty("tradesReport")
        val tradesReport: kotlin.Array<OrderTradesReport>? = null
) {

    /**
     *
     * Values: sell,buy
     */

    enum class Side(val value: kotlin.String) {
        @JsonProperty("sell")
        sell("sell"),
        @JsonProperty("buy")
        buy("buy");
    }

    /**
     *
     * Values: new,suspended,partiallyFilled,filled,canceled,expired
     */

    enum class Status(val value: kotlin.String) {
        @JsonProperty("new")
        new("new"),
        @JsonProperty("suspended")
        suspended("suspended"),
        @JsonProperty("partiallyFilled")
        partiallyFilled("partiallyFilled"),
        @JsonProperty("filled")
        filled("filled"),
        @JsonProperty("canceled")
        canceled("canceled"),
        @JsonProperty("expired")
        expired("expired");
    }

    /**
     *
     * Values: limit,market,stopLimit,stopMarket
     */

    enum class Type(val value: kotlin.String) {
        @JsonProperty("limit")
        limit("limit"),
        @JsonProperty("market")
        market("market"),
        @JsonProperty("stopLimit")
        stopLimit("stopLimit"),
        @JsonProperty("stopMarket")
        stopMarket("stopMarket");
    }

    /**
     *
     * Values: gTC,iOC,fOK,day,gTD
     */

    enum class TimeInForce(val value: kotlin.String) {
        @JsonProperty("GTC")
        gTC("GTC"),
        @JsonProperty("IOC")
        iOC("IOC"),
        @JsonProperty("FOK")
        fOK("FOK"),
        @JsonProperty("Day")
        day("Day"),
        @JsonProperty("GTD")
        gTD("GTD");
    }
}

