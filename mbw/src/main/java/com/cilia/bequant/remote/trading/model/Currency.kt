/**
 * API
 * Create API keys in your profile and use public API key as username and secret as password to authorize.
 *
 * The version of the OpenAPI document: 2.19.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mycelium.bequant.remote.trading.model


import com.fasterxml.jackson.annotation.JsonProperty

/**
 *
 * @param id Currency code
 * @param fullName
 * @param crypto True for cryptocurrencies, false for fiat, ICO and others.
 * @param payinEnabled True if cryptocurrency support generate adress or paymentId for deposits
 * @param payinPaymentId True if cryptocurrency requred use paymentId for deposits
 * @param payinConfirmations Confirmations count for cryptocurrency deposits
 * @param payoutEnabled
 * @param payoutFee Default withdraw fee
 * @param payoutIsPaymentId True if cryptocurrency allow use paymentId for withdraw
 * @param delisted True if currency delisted (stopped deposit and trading)
 * @param transferEnabled
 * @param payoutMinimalAmount Minimum withdraw amount
 * @param precisionPayout Currency precision for payout (number of digits after the decimal point)
 * @param precisionTransfer Currency precision for transfer (number of digits after the decimal point)
 */

data class Currency(
        /* Currency code */
        @JsonProperty("id")
        var id: kotlin.String,
        @JsonProperty("fullName")
        val fullName: kotlin.String,
        /* True for cryptocurrencies, false for fiat, ICO and others. */
        @JsonProperty("crypto")
        val crypto: kotlin.Boolean,
        /* True if cryptocurrency support generate adress or paymentId for deposits */
        @JsonProperty("payinEnabled")
        val payinEnabled: kotlin.Boolean,
        /* True if cryptocurrency requred use paymentId for deposits */
        @JsonProperty("payinPaymentId")
        val payinPaymentId: kotlin.Boolean,
        /* Confirmations count for cryptocurrency deposits */
        @JsonProperty("payinConfirmations")
        val payinConfirmations: kotlin.Int,
        @JsonProperty("payoutEnabled")
        val payoutEnabled: kotlin.Boolean,
        /* Default withdraw fee */
        @JsonProperty("payoutFee")
        val payoutFee: kotlin.String?,
        /* True if cryptocurrency allow use paymentId for withdraw */
        @JsonProperty("payoutIsPaymentId")
        val payoutIsPaymentId: kotlin.Boolean,
        /* True if currency delisted (stopped deposit and trading) */
        @JsonProperty("delisted")
        val delisted: kotlin.Boolean,
        @JsonProperty("transferEnabled")
        val transferEnabled: kotlin.Boolean,
        /* Currency precision for payout (number of digits after the decimal point) */
        @JsonProperty("precisionPayout")
        val precisionPayout: kotlin.Int,
        /* Currency precision for transfer (number of digits after the decimal point) */
        @JsonProperty("precisionTransfer")
        val precisionTransfer: kotlin.Int
)

