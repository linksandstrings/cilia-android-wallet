/**
 * Auth API
 * Auth API<br> <a href='/changelog'>Changelog</a>
 *
 * The version of the OpenAPI document: v0.0.50
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mycelium.bequant.remote.client.apis

import com.mycelium.bequant.BequantConstants
import com.mycelium.bequant.remote.client.createApi
import com.mycelium.bequant.remote.client.models.*
import retrofit2.Response
import retrofit2.http.Body
import retrofit2.http.GET
import retrofit2.http.POST
import retrofit2.http.Query

interface AccountApi {

    /**
     * Email confirmation
     * Email confirmation
     * Responses:
     *  - 200: OK
     *  - 0: error
     *
     * @param token
     * @return void
     */
    @GET("account/email/confirm")

    suspend fun getAccountEmailConfirm(
            @Query("token") token: kotlin.String
    ): Response<Unit>

    /**
     * Generate account once token
     * Generate account once token
     * Responses:
     *  - 200: OK
     *
     * @return void
     */
    @GET("account/once-token")

    suspend fun getAccountOnceToken(): Response<OnceTokenResponse>

    /**
     * Password set with token HTML form
     * Password set with token  HTML form
     * Responses:
     *  - 200: OK
     *  - 0: error
     *
     * @param token
     * @return kotlin.String
     */
    @GET("account/password/set")

    suspend fun getAccountPasswordSet(
            @Query("token") token: kotlin.String
    ): Response<kotlin.String>

    /**
     * Account totp confirm
     * Account totp confirm
     * Responses:
     *  - 200: OK
     *  - 0: error
     *
     * @param token
     * @return void
     */
    @GET("account/totp/confirm")

    suspend fun getAccountTotpConfirm(
            @Query("token") token: kotlin.String
    ): Response<Unit>

    /**
     * Account totp delete confirm
     * Account totp delete confirm
     * Responses:
     *  - 200: OK
     *  - 0: error
     *
     * @param token
     * @return void
     */
    @GET("account/totp/delete/confirm")

    suspend fun getAccountTotpDeleteConfirm(
            @Query("token") token: kotlin.String
    ): Response<Unit>

    /**
     * Account totp list
     * Account totp list &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
     * Responses:
     *  - 200: OK
     *  - 401: Api key is missing or invalid
     *  - 403: Api key is missing or invalid
     *  - 420: Session issues
     *  - 421: Token expired
     *  - 0: error
     *
     * @return TotpListResponse
     */
    @GET("account/totp/list")

    suspend fun getAccountTotpList(

    ): Response<TotpListResponse>

    /**
     * Account auth
     * Account auth
     * Responses:
     *  - 200: OK
     *  - 401: Api key is missing or invalid
     *  - 403: Api key is missing or invalid
     *  - 420: Session issues
     *  - 0: error
     *
     * @param accountAuthRequest
     * @return AccountAuthResponse
     */
    @POST("account/auth")

    suspend fun postAccountAuth(
            @Body accountAuthRequest: AccountAuthRequest
    ): Response<AccountAuthResponse>

    /**
     * Resend email confirmation
     * Resend email confirmation
     * Responses:
     *  - 200: OK
     *  - 0: error
     *
     * @param accountEmailConfirmResend
     * @return void
     */
    @POST("account/email/confirm/resend")

    suspend fun postAccountEmailConfirmResend(
            @Body accountEmailConfirmResend: AccountEmailConfirmResend
    ): Response<Unit>

    /**
     * Password reset
     * Password reset
     * Responses:
     *  - 200: OK
     *  - 401: Api key is missing or invalid
     *  - 403: Api key is missing or invalid
     *  - 0: error
     *
     * @param accountPasswordResetRequest
     * @return void
     */
    @POST("account/password/reset")

    suspend fun postAccountPasswordReset(
            @Body accountPasswordResetRequest: AccountPasswordResetRequest
    ): Response<Unit>

    /**
     * Password set with token
     * Password set with token
     * Responses:
     *  - 200: OK
     *  - 401: Api key is missing or invalid
     *  - 403: Api key is missing or invalid
     *  - 0: error
     *
     * @param accountPasswordSetRequest
     * @return void
     */
    @POST("account/password/set")

    suspend fun postAccountPasswordSet(
            @Body accountPasswordSetRequest: AccountPasswordSetRequest
    ): Response<Unit>

    /**
     * Password update
     * Password update &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
     * Responses:
     *  - 200: OK
     *  - 401: Api key is missing or invalid
     *  - 403: Api key is missing or invalid
     *  - 420: Session issues
     *  - 421: Token expired
     *  - 0: error
     *
     * @param accountPasswordUpdateRequest
     * @return void
     */
    @POST("account/password/update")

    suspend fun postAccountPasswordUpdate(
            @Body accountPasswordUpdateRequest: AccountPasswordUpdateRequest
    ): Response<Unit>

    /**
     * Register account
     * Register account
     * Responses:
     *  - 200: Maybe
     *  - 401: Api key is missing or invalid
     *  - 403: Api key is missing or invalid
     *  - 0: error
     *
     * @param registerAccountRequest
     * @return void
     */
    @POST("account/register")

    suspend fun postAccountRegister(
            @Body registerAccountRequest: RegisterAccountRequest
    ): Response<Unit>

    /**
     * Account totp activate
     * Account totp activate &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
     * Responses:
     *  - 200: OK
     *  - 401: Api key is missing or invalid
     *  - 403: Api key is missing or invalid
     *  - 420: Session issues
     *  - 421: Token expired
     *  - 0: error
     *
     * @param totpActivateRequest  (optional)
     * @return SessionResponse
     */
    @POST("account/totp/activate")

    suspend fun postAccountTotpActivate(
            @Body totpActivateRequest: TotpActivateRequest? = null
    ): Response<SessionResponse>

    /**
     * Account totp create
     * Account totp create &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
     * Responses:
     *  - 200: OK
     *  - 401: Api key is missing or invalid
     *  - 403: Api key is missing or invalid
     *  - 0: error
     *
     * @param totpCreateRequest  (optional)
     * @return TotpCreateResponse
     */
    @POST("account/totp/create")

    suspend fun postAccountTotpCreate(
            @Body totpCreateRequest: TotpCreateRequest? = null
    ): Response<TotpCreateResponse>

    /**
     * Account totp delete
     * Account totp delete &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
     * Responses:
     *  - 200: OK
     *  - 401: Api key is missing or invalid
     *  - 403: Api key is missing or invalid
     *  - 420: Session issues
     *  - 421: Token expired
     *  - 0: error
     *
     * @param totpDeleteRequest  (optional)
     * @return void
     */
    @POST("account/totp/delete")

    suspend fun postAccountTotpDelete(
            @Body totpDeleteRequest: TotpDeleteRequest? = null
    ): Response<Unit>


    companion object {
        fun create(): AccountApi = createApi(BequantConstants.AUTH_ENDPOINT, true)
    }
}
