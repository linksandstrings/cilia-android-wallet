/**
 * API
 * Create API keys in your profile and use public API key as username and secret as password to authorize.
 *
 * The version of the OpenAPI document: 2.19.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mycelium.bequant.remote.trading.model


import com.fasterxml.jackson.annotation.JsonProperty

/**
 *
 * @param id
 * @param index
 * @param currency
 * @param amount
 * @param status
 * @param type
 * @param fee
 * @param address
 * @param paymentId
 * @param hash
 * @param subType
 * @param offchainId
 * @param confirmations
 * @param createdAt
 * @param updatedAt
 * @param errorCode
 */

data class Transaction(
        @JsonProperty("id")
        val id: kotlin.String,
        @JsonProperty("index")
        val index: kotlin.String,
        @JsonProperty("currency")
        val currency: kotlin.String,
        @JsonProperty("amount")
        val amount: kotlin.String,
        @JsonProperty("status")
        val status: Transaction.Status,
        @JsonProperty("type")
        val type: Transaction.Type,
        @JsonProperty("fee")
        val fee: kotlin.String? = null,
        @JsonProperty("address")
        val address: kotlin.String? = null,
        @JsonProperty("paymentId")
        val paymentId: kotlin.String? = null,
        @JsonProperty("hash")
        val hash: kotlin.String? = null,
        @JsonProperty("subType")
        val subType: Transaction.SubType? = null,
        @JsonProperty("offchainId")
        val offchainId: kotlin.String? = null,
        @JsonProperty("confirmations")
        val confirmations: java.math.BigDecimal? = null,
        @JsonProperty("createdAt")
        val createdAt: java.util.Date? = null,
        @JsonProperty("updatedAt")
        val updatedAt: java.util.Date? = null,
        @JsonProperty("errorCode")
        val errorCode: Transaction.ErrorCode? = null
) {

    /**
     *
     * Values: created,pending,failed,success
     */

    enum class Status(val value: kotlin.String) {
        @JsonProperty("created")
        created("created"),
        @JsonProperty("pending")
        pending("pending"),
        @JsonProperty("failed")
        failed("failed"),
        @JsonProperty("success")
        success("success");
    }

    /**
     *
     * Values: payout,payin,deposit,withdraw,bankToExchange,exchangeToBank
     */

    enum class Type(val value: kotlin.String) {
        @JsonProperty("payout")
        payout("payout"),
        @JsonProperty("payin")
        payin("payin"),
        @JsonProperty("deposit")
        deposit("deposit"),
        @JsonProperty("withdraw")
        withdraw("withdraw"),
        @JsonProperty("bankToExchange")
        bankToExchange("bankToExchange"),
        @JsonProperty("exchangeToBank")
        exchangeToBank("exchangeToBank");
    }

    /**
     *
     * Values: offchain,swap
     */

    enum class SubType(val value: kotlin.String) {
        @JsonProperty("offchain")
        offchain("offchain"),
        @JsonProperty("swap")
        swap("swap");
    }

    /**
     *
     * Values: iNVALIDADDRESS,iNVALIDPAYMENTID,bADPRECISION
     */

    enum class ErrorCode(val value: kotlin.String) {
        @JsonProperty("INVALID_ADDRESS")
        iNVALIDADDRESS("INVALID_ADDRESS"),
        @JsonProperty("INVALID_PAYMENT_ID")
        iNVALIDPAYMENTID("INVALID_PAYMENT_ID"),
        @JsonProperty("BAD_PRECISION")
        bADPRECISION("BAD_PRECISION");
    }
}

